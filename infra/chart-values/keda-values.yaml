operator:
  # -- Capability to configure the number of replicas for KEDA operator.
  # While you can run more replicas of our operator, only one operator instance will be the leader and serving traffic.
  # You can run multiple replicas, but they will not improve the performance of KEDA, it could only reduce downtime during a failover.
  # Learn more in [our documentation](https://keda.sh/docs/latest/operate/cluster/#high-availability).
  replicaCount: 1

metricsServer:
  # -- Capability to configure the number of replicas for KEDA metric server.
  # While you can run more replicas of our metric server, only one instance will used and serve traffic.
  # You can run multiple replicas, but they will not improve the performance of KEDA, it could only reduce downtime during a failover.
  # Learn more in [our documentation](https://keda.sh/docs/latest/operate/cluster/#high-availability).
  replicaCount: 1

webhooks:
  # -- Capability to configure the number of replicas for KEDA admission webhooks
  replicaCount: 1

podIdentity:
  aws:
    irsa:
      # -- Specifies whether [AWS IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html) is to be enabled or not.
      enabled: false
      # -- Sets the token audience for IRSA.
      # This will be set as an annotation on the KEDA service account.
      audience: "sts.amazonaws.com"
      # -- Set to the value of the ARN of an IAM role with a web identity provider.
      # This will be set as an annotation on the KEDA service account.
      roleArn: ""
      # -- Sets the use of an STS regional endpoint instead of global.
      # Recommended to use regional endpoint in almost all cases.
      # This will be set as an annotation on the KEDA service account.
      stsRegionalEndpoints: "true"
      # -- Set to the value of the service account token expiration duration.
      # This will be set as an annotation on the KEDA service account.
      tokenExpiration: 86400

# -- Set this if you are using an external scaler and want to communicate
# over TLS (recommended). This variable holds the name of the secret that
# will be mounted to the /grpccerts path on the Pod
grpcTLSCertsSecret: ""

# -- Set this if you are using HashiCorp Vault and want to communicate
# over TLS (recommended). This variable holds the name of the secret that
# will be mounted to the /vault path on the Pod
hashiCorpVaultTLS: ""

logging:
  operator:
    # -- Logging level for KEDA Operator.
    # allowed values: `debug`, `info`, `error`, or an integer value greater than 0, specified as string
    level: info
    # -- Logging format for KEDA Operator.
    # allowed values: `json` or `console`
    format: console
    # -- Logging time encoding for KEDA Operator.
    # allowed values are `epoch`, `millis`, `nano`, `iso8601`, `rfc3339` or `rfc3339nano`
    timeEncoding: rfc3339
  metricServer:
    # -- Logging level for Metrics Server.
    # allowed values: `0` for info, `4` for debug, or an integer value greater than 0, specified as string
    level: 0

  webhooks:
    # -- Logging level for KEDA Operator.
    # allowed values: `debug`, `info`, `error`, or an integer value greater than 0, specified as string
    level: info
    # -- Logging format for KEDA Admission webhooks.
    # allowed values: `json` or `console`
    format: console
    # -- Logging time encoding for KEDA Operator.
    # allowed values are `epoch`, `millis`, `nano`, `iso8601`, `rfc3339` or `rfc3339nano`
    timeEncoding: rfc3339

service:
  # -- KEDA Metric Server service type
  type: ClusterIP
  # -- HTTPS port for KEDA Metric Server service
  portHttps: 443
  # -- HTTPS port for KEDA Metric Server container
  portHttpsTarget: 6443
  # -- Annotations to add the KEDA Metric Server service
  annotations: {}

# We provides the default values that we describe in our docs:
# https://keda.sh/docs/latest/operate/cluster/
# If you want to specify the resources (or totally remove the defaults), change or comment the following
# lines, adjust them as necessary, or simply add the curly braces after 'operator' and/or 'metricServer'
# and remove/comment the default values
resources:
  # -- Manage [resource request & limits] of KEDA operator pod
  operator:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi
  # -- Manage [resource request & limits] of KEDA metrics apiserver pod
  metricServer:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi
  # -- Manage [resource request & limits] of KEDA admission webhooks pod
  webhooks:
    limits:
      cpu: 50m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 10Mi

## Extra KEDA Operator and Metrics Adapter container arguments
extraArgs:
  # -- Additional KEDA Operator container arguments
  keda: {}
  # -- Additional Metrics Adapter container arguments
  metricsAdapter: {}

# -- Additional environment variables that will be passed onto all KEDA components
env: []
# - name: ENV_NAME
#   value: 'ENV-VALUE'

# Extra volumes and volume mounts for the deployment. Optional.
volumes:
  keda:
    # -- Extra volumes for KEDA deployment
    extraVolumes: []
    # -- Extra volume mounts for KEDA deployment
    extraVolumeMounts: []

  metricsApiServer:
    # -- Extra volumes for metric server deployment
    extraVolumes: []
    # -- Extra volume mounts for metric server deployment
    extraVolumeMounts: []

  webhooks:
    # -- Extra volumes for admission webhooks deployment
    extraVolumes: []
    # -- Extra volume mounts for admission webhooks deployment
    extraVolumeMounts: []

prometheus:
  metricServer:
    # -- Enable metric server Prometheus metrics expose
    enabled: true
    # -- HTTP port used for exposing metrics server prometheus metrics
    port: 8080
    # -- HTTP port name for exposing metrics server prometheus metrics
    portName: metrics
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus Operator
      enabled: true
      # -- JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # --  Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels:
        release: prometheus-stack
    podMonitor:
      # -- Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      # -- Scraping interval for metric server using podMonitor crd (prometheus operator)
      interval: ""
      # -- Scraping timeout for metric server using podMonitor crd (prometheus operator)
      scrapeTimeout: ""
      # -- Scraping namespace for metric server using podMonitor crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for metric server using podMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- List of expressions that define custom relabeling rules for metric server podMonitor crd (prometheus operator)
      relabelings: []
  operator:
    # -- Enable KEDA Operator prometheus metrics expose
    enabled: true
    # -- Port used for exposing KEDA Operator prometheus metrics
    port: 8080
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus Operator
      enabled: true
      # -- JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service,
      # the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels:
        release: prometheus-stack
    podMonitor:
      # -- Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      # -- Scraping interval for KEDA Operator using podMonitor crd (prometheus operator)
      interval: ""
      # -- Scraping timeout for KEDA Operator using podMonitor crd (prometheus operator)
      scrapeTimeout: ""
      # -- Scraping namespace for KEDA Operator using podMonitor crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA Operator using podMonitor crd (prometheus operator)
      additionalLabels: {}
      # --  List of expressions that define custom relabeling rules for KEDA Operator podMonitor crd (prometheus operator)
      relabelings: []
    prometheusRules:
      # -- Enables PrometheusRules creation for the Prometheus Operator
      enabled: true
      # -- Scraping namespace for KEDA Operator using prometheusRules crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA Operator using prometheusRules crd (prometheus operator)
      additionalLabels:
        release: prometheus-stack
      # -- Additional alerts to add for KEDA Operator using prometheusRules crd (prometheus operator)
      alerts:
        - alert: KedaScalerErrors
          annotations:
            description: Keda scaledObject {{ $labels.scaledObject }} is experiencing errors with {{ $labels.scaler }} scaler
            summary: Keda Scaler {{ $labels.scaler }} Errors
          expr: sum by ( scaledObject , scaler) (rate(keda_metrics_adapter_scaler_errors[2m]))  > 0
          for: 2m
          labels:
            severity: critical
  webhooks:
    # -- Enable KEDA admission webhooks prometheus metrics expose
    enabled: true
    # -- Port used for exposing KEDA admission webhooks prometheus metrics
    port: 8080
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus webhooks
      enabled: true
      # -- jobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels:
        release: prometheus-stack
    prometheusRules:
      # -- Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      # -- Scraping namespace for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      additionalLabels: {}
      # -- Additional alerts to add for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      alerts: []

# -- Array of extra K8s manifests to deploy
extraObjects: []
  # - apiVersion: keda.sh/v1alpha1
  #   kind: ClusterTriggerAuthentication
  #   metadata:
  #     name: aws-credentials
  #     namespace: keda
  #   spec:
  #     podIdentity:
  #       provider: aws-eks

# -- Capability to turn on/off ASCII art in Helm installation notes
asciiArt: true
